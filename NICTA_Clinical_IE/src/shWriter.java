import java.io.FileOutputStream;import java.io.IOException;import java.io.PrintStream;public class shWriter {	public static void main(String[] args) throws Exception {		int i;		System.out.println("1: for train and predict");		System.out.println("2: for test");		System.out.println("3: for excute meta");				if (args.length == 0) {			System.out.println("input a method");			System.exit(0);		} else if (args.length == 1) {			i = Integer.valueOf(args[0]);			// Scanner scan = new Scanner(System.in);			// i = scan.nextInt();			if (i == 1)				write1("exec.sh");			if (i == 2)				write2("text/CRF/test.sh");			if (i == 3)				write3("exutmeta.sh");			if(i==4)				write4("stanford.sh");			if(i==5)				write5("text/CRF/20.sh");			if(i==6){				write6("/home/lizhou/Desktop/exe.sh");			}		}				else{			System.out.println("invalid args, input one");			System.exit(0);		}	}	private static void write6(String string) throws Exception {		// TODO Auto-generated method stub sdiff nursing_1/1_V ref_1/1 > 1		@SuppressWarnings("resource")		PrintStream ps = new PrintStream(new FileOutputStream(string));		ps.println("#!/bin/sh");		for (int i = 1; i < 101; i++) {			ps.println("sdiff -i nursing_1/" + i + "_V ref_1/" + i + " > " + "diff/"+i);		}			}	private static void write5(String string) throws Exception {		// TODO crf_test  -m model/20DocModel baselinetest/test30^Cata > predicted/30output.txt		@SuppressWarnings("resource")		PrintStream ps = new PrintStream(new FileOutputStream(string));		ps.println("#!/bin/sh");		for (int i = 5; i < 101; i+=5) {			ps.println("crf_test  -m model/20DocModel baselinetest/test" + i + ".data > predicted/" + "output" + i + ".txt");		}			}	private static void write4(String string) throws Exception {				@SuppressWarnings("resource")		PrintStream ps = new PrintStream(new FileOutputStream(string));		ps.println("#!/bin/sh");		for (int i = 0; i < 101; i++) {			ps.println("java -cp stanford-corenlp-3.2.0.jar:stanford-corenlp-3.2.0-models.jar:xom.jar:joda-time.jar:jollyday.jar -Xmx3g edu.stanford.nlp.pipeline.StanfordCoreNLP -annotators tokenize,ssplit,pos,lemma,ner,parse,dcoref -file \"/home/lizhou/Desktop/scenarios/"					+ i					+ ".txt\"");		}	}	private static void write3(String string) throws Exception {		@SuppressWarnings("resource")		PrintStream ps = new PrintStream(new FileOutputStream(string));		ps.println("#!/bin/sh");		for (int i = 0; i < 101; i++) {			ps.println("/shares2/public_mm/bin/SKRrun.12 /shares2/public_mm/bin/metamap12.BINARY.Linux -L 2011 -Z 2011AA -I -V USAbase --show_cuis --word_sense_disambiguation --prefer_multiple_concepts --negex --XMLf /home/lizhou/NICTA/Jo_scenarios/"					+ i					+ ".txt /home/lizhou/NICTA/metamapped/"					+ i					+ ".metamapped.xml");		}	}	private static void write2(String string) throws Exception {		@SuppressWarnings("resource")		PrintStream ps = new PrintStream(new FileOutputStream(string));		ps.println("#!/bin/sh");		for (int i = 0; i < 101; i++) {			ps.println("./conlleval.pl -r < predicted/output" + i					+ ".txt > testResult/test" + i + ".txt");		}	}	public static void write1(String filename) throws Exception {		try {			PrintStream ps = new PrintStream(new FileOutputStream(filename));			ps.println("#!/bin/sh");			for (int i = 51; i < 201; i++) {				ps.println("crf_learn templates/Features4 train/train" + i						+ ".data model/model" + i);				ps.println("crf_test  -m model/model" + i + " test/" + i						+ ".data > predicted/output" + i + ".txt");				ps.println();												//				ps.println("crf_learn /media/0D75160E0D75160E/myWorkplace/EPICURE/hanna/text/CRF/template1 /media/0D75160E0D75160E/myWorkplace/EPICURE/hanna/text/CRF/traindata/train" + i//						+ ".data /media/0D75160E0D75160E/myWorkplace/EPICURE/hanna/text/CRF/model/model" + i);//				ps.println("crf_test  -m /media/0D75160E0D75160E/myWorkplace/EPICURE/hanna/text/CRF/model/model" + i + " /media/0D75160E0D75160E/myWorkplace/EPICURE/hanna/text/CRF/testdata/" + i//						+ ".data > /media/0D75160E0D75160E/myWorkplace/EPICURE/hanna/text/CRF/predicted/output" + i + ".txt");//				ps.println();								//				ps.println("wapiti train -p templates/nppattern.txt traindata/train" + i//						+ ".data wapiti_mode/model" + i);//				ps.println("wapiti label -m wapiti_model/model" + i + " testdata/" + i//						+ ".data wapiti_predicted/output" + i + ".txt");			}			ps.close();			System.out.println("Done"); 		} catch (IOException e) {			e.printStackTrace();		}	}}