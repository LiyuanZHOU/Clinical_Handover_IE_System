import java.io.BufferedReader;import java.io.File;import java.io.FileOutputStream;import java.io.FileReader;import java.io.PrintStream;import java.util.ArrayList;import java.util.HashMap;import java.util.Iterator;import java.util.Map;import java.util.Map.Entry;import utils.ConfusionMatrix;import utils.FileFinder;public class Evaluation {	public int totalDoc;	public int totalWord = 0;	public int correctTopic = 0;	public int incorrectTopic = 0;	public double microPrecision;	public double microRecall;	public double microF1;	public double macroPrecision;	public double macroRecall;	public double macroF1;	public String txtPath;	public String splitmark = "	";	HashMap<String,ConfusionMatrix[]> cmps = new HashMap<String,ConfusionMatrix[]>();	static HashMap<String,HashMap<String,Integer>> big = new HashMap<String,HashMap<String,Integer>>();		public Evaluation(String string) throws Exception {		txtPath = string;		ArrayList<File> files = FileFinder.GetAllFiles(txtPath, ".txt", true);				//Total number of documents		totalDoc = files.size();		for (int i = 0; i < files.size(); i++){			File f = files.get(i);			execute(f,i);		}		Averaged();	}	private void execute(File f, int i) throws Exception {		BufferedReader br = new BufferedReader(new FileReader(f));		String line = null;		System.out.println("***********" + f.getName());		while ((line = br.readLine()) != null) {			String[] split = line.split(splitmark);			if (split.length < 2) continue;			totalWord++;						@SuppressWarnings("unused")			String word = split[0];			@SuppressWarnings("unused")			String lemma = split[1];						String annotated = split[split.length-2];			String predicted = split[split.length-1];						//TODO:test the top level labels//			String annotated = split[split.length-2].split("_")[0];//			String predicted = split[split.length-1].split("_")[0];						//TODO: in oder to generate baselines //			String predicted = "Future_Goal/TaskToBeCompleted/ExpectedOutcome";//			//			int random = (int )(Math.random() * 36 + 1);//			System.out.println("random number: " + random);////			switch (random) {//			case 1://				random = 1;//				predicted = "MyShift_OtherObservation";//				break;//			case 2://				random = 2;//				predicted = "PatientIntroduction_AdmissionReason/Diagnosis";//				break;//			case 3://				random = 3;//				predicted = "Appointment/Procedure_Status";//				break;//			case 4://				random = 4;//				predicted = "PatientIntroduction_Gender";//				break;//			case 5://				random = 5;//				predicted = "MyShift_Status";//				break;//			case 6://				random = 6;//				predicted = "Future_Discharge/TransferPlan";//				break;//			case 7://				random = 7;//				predicted = "MyShift_RiskManagement";//				break;//			case 8://				random = 8;//				predicted = "Future_Goal/TaskToBeCompleted/ExpectedOutcome";//				break;//			case 9://				random = 9;//				predicted = "PatientIntroduction_Allergy";//				break;//			case 10://				random = 10;//				predicted = "Future_Alert/Warning/AbnormalResult";//				break;//			case 11://				random = 11;//				predicted = "PatientIntroduction_GivenNames/Initials";//				break;//			case 12://				random = 12;//				predicted = "PatientIntroduction_ChronicCondition";//				break;//			case 13://				random = 13;//				predicted = "Appointment/Procedure_Day";//				break;//			case 14://				random = 14;//				predicted = "MyShift_Output/Diuresis/BowelMovement";//				break;//			case 15://				random = 15;//				predicted = "Appointment/Procedure_Description";//				break;//			case 16://				random = 16;//				predicted = "PatientIntroduction_Lastname";//				break;//			case 17://				random = 17;//				predicted = "PatientIntroduction_UnderDr_Lastname";//				break;//			case 18://				random = 18;//				predicted = "Appointment/Procedure_ClinicianGivenNames/Initials";//				break;//			case 19://				random = 19;//				predicted = "Appointment/Procedure_ClinicianLastname";//				break;//			case 20://				random = 20;//				predicted = "Medication_Medicine";//				break;//			case 21://				random = 21;//				predicted = "Appointment/Procedure_Ward";//				break;//			case 22://				random = 22;//				predicted = "PatientIntroduction_UnderDr_GivenNames/Initials";//				break;//			case 23://				random = 23;//				predicted = "MyShift_Contraption";//				break;//			case 24://				random = 24;//				predicted = "MyShift_Wounds/Skin";//				break;//			case 25://				random = 25;//				predicted = "PatientIntroduction_CurrentBed";//				break;//			case 26://				random = 26;//				predicted = "MyShift_Input/Diet";//				break;//			case 27://				random = 27;//				predicted = "PatientIntroduction_Disease/ProblemHistory";//				break;//			case 28://				random = 28;//				predicted = "PatientIntroduction_CurrentRoom";//				break;//			case 29://				random = 29;//				predicted = "MyShift_ActivitiesOfDailyLiving";//				break;//			case 30://				random = 30;//				predicted = "Appointment/Procedure_City";//				break;//			case 31://				random = 31;//				predicted = "Appointment/Procedure_Time";//				break;//			case 32://				random = 32;//				predicted = "PatientIntroduction_CarePlan";//				break;//			case 33://				random = 33;//				predicted = "Medication_Status";//				break;//			case 34://				random = 34;//				predicted = "Medication_Dosage";//				break;//			case 35://				random = 35;//				predicted = "PatientIntroduction_Ageinyears";//				break;							//			default://				random = 36;//				predicted = "NA";//				break;//			}			//			int random = (int )(Math.random() * 6 + 1);//			System.out.println("random number: " + random);////			switch (random) {//			case 1://				random = 1;//				predicted = "Iccco:_Identification_of_the_patient";//				break;//			case 2://				random = 2;//				predicted = "iCcco:_Clinical_presentation/history";//				break;//			case 3://				random = 3;//				predicted = "icCco:_Clinical_status";//				break;//			case 4://				random = 4;//				predicted = "iccCo:_Care_plan";//				break;//			case 5://				random = 5;//				predicted = "icccO:_Outcomes_and_goals_of_care";//				break;//			default://				random = 6;//				predicted = "NA";//				break;//			}						//			System.out.println(word + " " + lemma + " " + annotated + " " + predicted);						if(cmps.containsKey(annotated)){				cmps.get(annotated)[i].annotatedSet += 1;			} else{				System.out.println(annotated);				ConfusionMatrix[] cm = new ConfusionMatrix[totalDoc + 1];				for(int j = 0; j < cm.length; j++){					cm[j] = new ConfusionMatrix();				}				cm[i].annotatedSet = 1;				cmps.put(annotated, cm);			}			if(cmps.containsKey(predicted)){				cmps.get(predicted)[i].predictionSet += 1;			} else{				ConfusionMatrix[] cm = new ConfusionMatrix[totalDoc + 1];				for(int j = 0; j < cm.length; j++){					cm[j] = new ConfusionMatrix();				}				cm[i].predictionSet = 1;				cmps.put(predicted, cm);			}						if(annotated.equals(predicted)) {				cmps.get(annotated)[i].TP += 1;				correctTopic += 1;			}			else {				cmps.get(annotated)[i].FP += 1;				incorrectTopic += 1;			}							HashMap<String, Integer> confused = big.get(annotated);			if(confused!=null){				if(confused.containsKey(predicted)){					int temp = confused.get(predicted);					confused.put(predicted, temp+1);					big.put(annotated, confused);				} else{					confused.put(predicted, 1);					big.put(annotated, confused);				}			} else{				HashMap<String, Integer> temp = new HashMap<String, Integer>();				temp.put(predicted, 1);				big.put(annotated, temp);			}		}		br.close();					}	private void Averaged() {				//->first, then vertical		int sumTP = 0;		int sumTPFP = 0;		int sumTPFN = 0;				double sumP = 0;		double sumR = 0;				Iterator<Entry<String, ConfusionMatrix[]>> iter1 = cmps.entrySet().iterator();		while (iter1.hasNext()) {		    Entry<String, ConfusionMatrix[]> entry1 = iter1.next();		    //for every label, vertical		    ConfusionMatrix[] cms = entry1.getValue();		    		    double sump = 0.0;		    double sumr = 0.0;		    		    double sumtp = 0.0;		    double sumtpfn = 0.0;		    double sumtpfp = 0.0;		    		    int total = 0;		    for (int i = 0; i < cms.length - 1;i++){		    	if(cms[i].annotatedSet > 0 || cms[i].predictionSet > 0){		    		total ++;		    		cms[i].precision = cms[i].TP * 1.0 / cms[i].predictionSet;			    	cms[i].recall = cms[i].TP * 1.0 / cms[i].annotatedSet;			    	if(cms[i].precision >0) sump += cms[i].precision;			    	if(cms[i].recall > 0) sumr += cms[i].recall;			    				    	sumtp += cms[i].TP;			    	sumtpfp += cms[i].predictionSet;			    	sumtpfn += cms[i].annotatedSet;			    				    	cms[totalDoc].annotatedSet += cms[i].annotatedSet;			    	cms[totalDoc].predictionSet += cms[i].predictionSet;		    	}		    }		    		    cms[totalDoc].TP = (int) sumtp;		    double MacroP = sump / total;		    double MacroR = sumr / total;		    double MacroF = 2.0 * (MacroP * MacroR)/ (MacroP + MacroR);		    		    cms[totalDoc].MacroP = MacroP;		    cms[totalDoc].MacroR = MacroR;		    cms[totalDoc].MacroF = MacroF;		    		    double MicroP = sumtp / sumtpfp;		    double MicroR = sumtp / sumtpfn;		    double MicroF = 2.0 * (MicroP * MicroR)/ (MicroP + MicroR);		    		    cms[totalDoc].MicroP = MicroP;		    cms[totalDoc].MicroR = MicroR;		    cms[totalDoc].MicroF = MicroF;		 }						//this is for every test document		ConfusionMatrix[] sum = new ConfusionMatrix[totalDoc];		for (int j = 0; j < totalDoc; j++){			sum[j] = new ConfusionMatrix(); 			Iterator<Entry<String, ConfusionMatrix[]>> iter2 = cmps.entrySet().iterator();			while (iter2.hasNext()) {			    Entry<String, ConfusionMatrix[]> entry2 = iter2.next();			    String label = entry2.getKey();			    if(label.equals("NA")) continue;			    ConfusionMatrix[] cms = entry2.getValue();			    sum[j].TP += cms[j].TP; 			    sum[j].predictionSet += cms[j].predictionSet;			    sum[j].annotatedSet += cms[j].annotatedSet;			    }			sum[j].precision = sum[j].TP * 1.0/ sum[j].predictionSet;			sum[j].recall = sum[j].TP * 1.0/ sum[j].annotatedSet;		}				for(int j = 0; j < totalDoc; j++){			sumTP += sum[j].TP;						sumTPFP += sum[j].predictionSet;			sumTPFN += sum[j].annotatedSet;			if(sum[j].precision>0)			sumP += sum[j].precision;			if(sum[j].recall>0)			sumR += sum[j].recall;		}				System.out.println(sumTP + "	" + sumTPFP +"	 "+sumTPFN);		microPrecision = sumTP*1.0/ sumTPFP;		microRecall = sumTP*1.0/ sumTPFN; 		microF1 = 2 * microPrecision * microRecall / (microPrecision+microRecall);				System.out.println(sumP + "	" + sumR + " " + totalDoc);		macroPrecision = sumP *1.0/ totalDoc;		macroRecall = sumR / totalDoc;		macroF1 = 2 * macroPrecision * macroRecall / (macroRecall + macroPrecision);//		System.out.println(macroPrecision + "	" + macroRecall + " " + macroF1);	}	@SuppressWarnings("rawtypes")	public static void printHashMap(HashMap map){		Iterator iter = map.entrySet().iterator();		while (iter.hasNext()) {		    Map.Entry entry = (Map.Entry) iter.next();		    Object key = entry.getKey();		    Object val = entry.getValue();		    System.out.println(key + ": " + val);		} 	}	public static void main(String[] args) {		try {			Evaluation evaluator = new Evaluation(args[0]);			evaluator.printResult(args[1]);//			printCM();			}catch (Exception e) {			e.printStackTrace();			showHelp();			System.exit(0);		}		System.out.println("saved to: " +args[1]);	}	@SuppressWarnings("unused")	private static void printCM() {		@SuppressWarnings("rawtypes")		Iterator iter = big.entrySet().iterator();		while (iter.hasNext()) {		    @SuppressWarnings("rawtypes")			Map.Entry entry = (Map.Entry) iter.next();		    Object annotated = entry.getKey();		    @SuppressWarnings("unchecked")			HashMap<String,Integer> confused = (HashMap<String, Integer>) entry.getValue();		    @SuppressWarnings("rawtypes")			Iterator iter1 = confused.entrySet().iterator();		    System.out.println(annotated + ": \n" );		    while (iter1.hasNext()) {			    @SuppressWarnings("rawtypes")				Map.Entry entry1 = (Map.Entry) iter1.next();			    Object predicted = entry1.getKey();			    Object count = entry1.getValue();			    System.out.println("\t" + predicted + ": " + count + "\n");			    }		} 			}	private static void showHelp() {		System.out.println("Evaluation: calculates recall,precision and F1");		System.out.println("Usage:");		System.out.println("Evaluation [-file/-folder] [inputFilesFolder] [outputFile]");		System.out.println("CRFBuilder -h, --help \t show this help and exit");			}	private void printResult(String outputPath) throws Exception {		String string = outputPath;		@SuppressWarnings("resource")		PrintStream	ps = new PrintStream(new FileOutputStream(string));//		ps.println("Total number of documents: " + totalDoc);//		ps.println("Total number of words: " + totalWord);//		ps.println("Correct topic: " + correctTopic);//		ps.println("Incorrect topic: " + incorrectTopic);//		ps.printf("Micro-averaged Precision: %.2f%%\n", microPrecision * 100);//		ps.printf("Micro-averaged Recall: %.2f%%\n", microRecall * 100);//		ps.printf("Micro-averaged F1: %.2f%%\n",microF1 * 100);//		ps.printf("Macro-averaged Precision: %.2f%%\n", macroPrecision * 100);//		ps.printf("Macro-averaged Recall: %.2f%%\n", macroRecall * 100);//		ps.printf("Macro-averaged F1: %.2f%%\n", macroF1 * 100);				ps.println();		ps.printf("%.2f%%\t", microPrecision * 100);		ps.printf("%.2f%%\t", microRecall * 100);		ps.printf("%.2f%%\t",microF1 * 100);		ps.printf("%.2f%%\t", macroPrecision * 100);		ps.printf("%.2f%%\t", macroRecall * 100);		ps.printf("%.2f%%\n", macroF1 * 100);				ps.println();				Iterator<Entry<String, ConfusionMatrix[]>> iter = cmps.entrySet().iterator();		while (iter.hasNext()) {		    Entry<String, ConfusionMatrix[]> entry = iter.next();		    ConfusionMatrix[] cm = entry.getValue();		    String label = entry.getKey();		    ps.println(entry.getKey() + "(" + cm[totalDoc].annotatedSet + " annotated;" +  cm[totalDoc].TP + " correct):");		    //		    ps.printf("\t Mic_precision: %.2f%%;\t Mic_recall: %.2f%%;\t Mic_F1: %.2f%%\n", cmps.get(label)[totalDoc].MicroP * 100 , cmps.get(label)[totalDoc].MicroR * 100, cmps.get(label)[totalDoc].MicroF * 100);//		    ps.printf("\t Mac_precision: %.2f%%;\t Mac_recall: %.2f%%;\t Mac_F1: %.2f%%\n", cmps.get(label)[totalDoc].MacroP * 100 , cmps.get(label)[totalDoc].MacroR * 100, cmps.get(label)[totalDoc].MacroF * 100);			    //TODO: for form filling		    ps.printf("%.2f%%\t%.2f%%\t%.2f%%", cmps.get(label)[totalDoc].MicroP * 100 , cmps.get(label)[totalDoc].MicroR * 100, cmps.get(label)[totalDoc].MicroF * 100);		    ps.printf("\t%.2f%%\t%.2f%%\t%.2f%%\n", cmps.get(label)[totalDoc].MacroP * 100 , cmps.get(label)[totalDoc].MacroR * 100, cmps.get(label)[totalDoc].MacroF * 100);		}	}}