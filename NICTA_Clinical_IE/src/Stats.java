import java.io.BufferedReader;import java.io.File;import java.io.FileReader;import java.io.IOException;import java.util.ArrayList;import java.util.HashMap;import java.util.Iterator;import java.util.Map.Entry;import java.util.TreeSet;import utils.FileFinder;import utils.MyComparator;public class Stats {	private String inputFolder = "";	private int tokens = 0;	private int tMax = 0;	private int tMin = 100000;	private double tAverage = 0.0;	private double tSd = 0.0;	private HashMap<String, Integer> lemmas;	private int lMax = 0;	private int lMin = 100000;	private double lAverage = 0.0;	private double lSd = 0.0;	private int totalNumber = 0;	public Stats(String string) {		inputFolder = string;		lemmas = new HashMap<String, Integer>();	}	public static void main(String args[]) throws IOException {		Stats stats = new Stats(args[0]);		ArrayList<File> files = FileFinder.GetAllFiles(stats.inputFolder,				".data", true);		stats.totalNumber = files.size();		int[] tokens = new int[stats.totalNumber];		int[] lemmas = new int[stats.totalNumber];				int sumLemma = 0;				for (int i = 0; i < stats.totalNumber; i++) {			File f = files.get(i);			HashMap<String,Integer> pLemma = new HashMap<String,Integer>();			System.out.println(f.getName());			int pToken = 0;			@SuppressWarnings("resource")			BufferedReader br = new BufferedReader(new FileReader(f));			String line = null;			while ((line = br.readLine()) != null) {				String[] split = line.split(" ");				if (split.length < 2)					continue;				String lemma = split[1];								stats.tokens++;				pToken++;				if (stats.lemmas.containsKey(lemma)) {					int count = stats.lemmas.get(lemma);					stats.lemmas.put(lemma, count + 1);				} else {					stats.lemmas.put(lemma, 1);				}								if(pLemma.containsKey(lemma)){					int count = pLemma.get(lemma);					pLemma.put(lemma, count + 1);				} else{					pLemma.put(lemma, 1);				}			}						tokens[i] = pToken;			lemmas[i] = pLemma.size();			sumLemma += lemmas[i];						if(tokens[i] > stats.tMax) stats.tMax = tokens[i];			if(tokens[i] < stats.tMin) stats.tMin = tokens[i];			if(lemmas[i] > stats.lMax) stats.lMax = lemmas[i];			if(lemmas[i] < stats.lMin) stats.lMin = lemmas[i];					System.out.println("	tokens: " + tokens[i] + "	lemmas: " + lemmas[i]);								}				stats.lAverage = sumLemma * 1.0 / stats.totalNumber;		stats.tAverage = stats.tokens * 1.0 / stats.totalNumber;				double sumT = 0.0;		double sumL = 0.0;		for(int i = 0; i < stats.totalNumber; i++){			sumT += Math.pow(tokens[i] - stats.tAverage,2);			sumL += Math.pow(lemmas[i] - stats.lAverage,2);		}				System.out.println("sumT = " + sumT + "	 sumL = " + sumL);		stats.lSd = Math.pow(sumL / stats.totalNumber, 0.5);		stats.tSd = Math.pow(sumT / stats.totalNumber, 0.5);				System.out.println("In total in all documents: " + stats.tokens + "		" + stats.lemmas.size());		System.out.println("Max: " + stats.tMax + "		" + stats.lMax);		System.out.println("Min: " + stats.tMin + "		" + stats.lMin);		System.out.println("Average: " + stats.tAverage + "		" + stats.lAverage);		System.out.println("Standard deviation: " + stats.tSd + "	" + stats.lSd);				@SuppressWarnings("rawtypes")		MyComparator comparator = new MyComparator();		@SuppressWarnings("unchecked")		TreeSet<Entry<String, Integer>> ts = new TreeSet<Entry<String, Integer>>(comparator);		Iterator<Entry<String, Integer>> iter = stats.lemmas.entrySet().iterator();		while (iter.hasNext()) {		    Entry<String, Integer> entry = iter.next();	    			ts.add(entry);		}				int c = 0;		for(@SuppressWarnings("rawtypes") Entry entry : ts){			c++;			System.out.println(c + ".	 " +"lemma: " + entry.getKey() + "	 count: " + entry.getValue());			if(c == 12) break;		}	}}